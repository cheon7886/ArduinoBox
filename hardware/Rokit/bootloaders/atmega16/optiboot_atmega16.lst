
optiboot_atmega16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b8  00003e00  00003e00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00003ffe  00003ffe  0000022c  2**0
                  CONTENTS, READONLY
  2 .data         00000000  00800060  00003fb8  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      0000002f  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000025d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000041f  00000000  00000000  00000285  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001cb  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001cc  00000000  00000000  0000086f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00000a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000132  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000023b  00000000  00000000  00000c02  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000e3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00003e00 <main>:
# define UART_SRL UBRR3L
# define UART_UDR UDR3
#endif

/* main program starts here */
int main(void) {
    3e00:	1f 92       	push	r1
    3e02:	cd b7       	in	r28, 0x3d	; 61
    3e04:	de b7       	in	r29, 0x3e	; 62
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    3e06:	11 24       	eor	r1, r1
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega16__) || defined (__AVR_ATmega32__)
  SP=RAMEND;  // This is done by hardware reset
    3e08:	8f e5       	ldi	r24, 0x5F	; 95
    3e0a:	94 e0       	ldi	r25, 0x04	; 4
    3e0c:	9e bf       	out	0x3e, r25	; 62
    3e0e:	8d bf       	out	0x3d, r24	; 61
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    3e10:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    3e12:	14 be       	out	0x34, r1	; 52
  if (!(ch & _BV(EXTRF))) appStart(ch);
    3e14:	81 ff       	sbrs	r24, 1
    3e16:	ca d0       	rcall	.+404    	; 0x3fac <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    3e18:	85 e0       	ldi	r24, 0x05	; 5
    3e1a:	8e bd       	out	0x2e, r24	; 46
#endif
#ifndef SOFT_UART
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega16__) || defined (__AVR_ATmega32__)
  UCSRA = _BV(U2X); //Double speed mode USART
    3e1c:	82 e0       	ldi	r24, 0x02	; 2
    3e1e:	8b b9       	out	0x0b, r24	; 11
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
    3e20:	88 e1       	ldi	r24, 0x18	; 24
    3e22:	8a b9       	out	0x0a, r24	; 10
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
    3e24:	86 e8       	ldi	r24, 0x86	; 134
    3e26:	80 bd       	out	0x20, r24	; 32
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    3e28:	80 e1       	ldi	r24, 0x10	; 16
    3e2a:	89 b9       	out	0x09, r24	; 9
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#endif
#endif

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);
    3e2c:	8e e0       	ldi	r24, 0x0E	; 14
    3e2e:	ab d0       	rcall	.+342    	; 0x3f86 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    3e30:	bf 9a       	sbi	0x17, 7	; 23
    3e32:	26 e0       	ldi	r18, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    3e34:	80 e3       	ldi	r24, 0x30	; 48
    3e36:	9c ef       	ldi	r25, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    3e38:	44 e0       	ldi	r20, 0x04	; 4
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    3e3a:	9d bd       	out	0x2d, r25	; 45
    3e3c:	8c bd       	out	0x2c, r24	; 44
    TIFR1 = _BV(TOV1);
    3e3e:	48 bf       	out	0x38, r20	; 56
    while(!(TIFR1 & _BV(TOV1)));
    3e40:	08 b6       	in	r0, 0x38	; 56
    3e42:	02 fe       	sbrs	r0, 2
    3e44:	fd cf       	rjmp	.-6      	; 0x3e40 <main+0x40>
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega16__) || defined (__AVR_ATmega32__)
    LED_PORT ^= _BV(LED);
    3e46:	38 b3       	in	r19, 0x18	; 24
    3e48:	30 58       	subi	r19, 0x80	; 128
    3e4a:	38 bb       	out	0x18, r19	; 24
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3e4c:	a8 95       	wdr
    3e4e:	21 50       	subi	r18, 0x01	; 1
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    3e50:	a1 f7       	brne	.-24     	; 0x3e3a <main+0x3a>
    3e52:	a1 2c       	mov	r10, r1
    3e54:	b1 2c       	mov	r11, r1
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    3e56:	ff 24       	eor	r15, r15
    3e58:	f3 94       	inc	r15
        addrPtr += 2;
      } while (--ch);

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    3e5a:	95 e0       	ldi	r25, 0x05	; 5
    3e5c:	e9 2e       	mov	r14, r25
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    3e5e:	21 e1       	ldi	r18, 0x11	; 17
    3e60:	d2 2e       	mov	r13, r18
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    3e62:	8a d0       	rcall	.+276    	; 0x3f78 <getch>

    if(ch == STK_GET_PARAMETER) {
    3e64:	81 34       	cpi	r24, 0x41	; 65
    3e66:	71 f4       	brne	.+28     	; 0x3e84 <main+0x84>
      unsigned char which = getch();
    3e68:	87 d0       	rcall	.+270    	; 0x3f78 <getch>
      verifySpace();
    3e6a:	89 83       	std	Y+1, r24	; 0x01
    3e6c:	90 d0       	rcall	.+288    	; 0x3f8e <verifySpace>
      if (which == 0x82) {
    3e6e:	89 81       	ldd	r24, Y+1	; 0x01
    3e70:	82 38       	cpi	r24, 0x82	; 130
    3e72:	09 f4       	brne	.+2      	; 0x3e76 <main+0x76>
    3e74:	1e c0       	rjmp	.+60     	; 0x3eb2 <main+0xb2>
	/*
	 * Send optiboot version as "minor SW version"
	 */
	putch(OPTIBOOT_MINVER);
      } else if (which == 0x81) {
    3e76:	81 38       	cpi	r24, 0x81	; 129
    3e78:	11 f4       	brne	.+4      	; 0x3e7e <main+0x7e>
	  putch(OPTIBOOT_MAJVER);
    3e7a:	85 e0       	ldi	r24, 0x05	; 5
    3e7c:	01 c0       	rjmp	.+2      	; 0x3e80 <main+0x80>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    3e7e:	83 e0       	ldi	r24, 0x03	; 3
    3e80:	77 d0       	rcall	.+238    	; 0x3f70 <putch>
    3e82:	73 c0       	rjmp	.+230    	; 0x3f6a <main+0x16a>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    3e84:	82 34       	cpi	r24, 0x42	; 66
    3e86:	11 f4       	brne	.+4      	; 0x3e8c <main+0x8c>
      // SET DEVICE is ignored
      getNch(20);
    3e88:	84 e1       	ldi	r24, 0x14	; 20
    3e8a:	03 c0       	rjmp	.+6      	; 0x3e92 <main+0x92>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    3e8c:	85 34       	cpi	r24, 0x45	; 69
    3e8e:	19 f4       	brne	.+6      	; 0x3e96 <main+0x96>
      // SET DEVICE EXT is ignored
      getNch(5);
    3e90:	85 e0       	ldi	r24, 0x05	; 5
    3e92:	85 d0       	rcall	.+266    	; 0x3f9e <getNch>
    3e94:	6a c0       	rjmp	.+212    	; 0x3f6a <main+0x16a>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    3e96:	85 35       	cpi	r24, 0x55	; 85
    3e98:	41 f4       	brne	.+16     	; 0x3eaa <main+0xaa>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    3e9a:	6e d0       	rcall	.+220    	; 0x3f78 <getch>
    3e9c:	a8 2e       	mov	r10, r24
      newAddress = (newAddress & 0xff) | (getch() << 8);
    3e9e:	6c d0       	rcall	.+216    	; 0x3f78 <getch>
    3ea0:	b1 2c       	mov	r11, r1
    3ea2:	b8 2a       	or	r11, r24
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    3ea4:	aa 0c       	add	r10, r10
    3ea6:	bb 1c       	adc	r11, r11
    3ea8:	5f c0       	rjmp	.+190    	; 0x3f68 <main+0x168>
      address = newAddress;
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    3eaa:	86 35       	cpi	r24, 0x56	; 86
    3eac:	21 f4       	brne	.+8      	; 0x3eb6 <main+0xb6>
      // UNIVERSAL command is ignored
      getNch(4);
    3eae:	84 e0       	ldi	r24, 0x04	; 4
    3eb0:	76 d0       	rcall	.+236    	; 0x3f9e <getNch>
      putch(0x00);
    3eb2:	80 e0       	ldi	r24, 0x00	; 0
    3eb4:	e5 cf       	rjmp	.-54     	; 0x3e80 <main+0x80>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    3eb6:	84 36       	cpi	r24, 0x64	; 100
    3eb8:	09 f0       	breq	.+2      	; 0x3ebc <main+0xbc>
    3eba:	3c c0       	rjmp	.+120    	; 0x3f34 <main+0x134>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
    3ebc:	5d d0       	rcall	.+186    	; 0x3f78 <getch>
      length = getch();
    3ebe:	5c d0       	rcall	.+184    	; 0x3f78 <getch>
    3ec0:	c8 2e       	mov	r12, r24
      getch();
    3ec2:	5a d0       	rcall	.+180    	; 0x3f78 <getch>

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    3ec4:	a1 14       	cp	r10, r1
    3ec6:	88 e3       	ldi	r24, 0x38	; 56
    3ec8:	b8 06       	cpc	r11, r24
    3eca:	20 f4       	brcc	.+8      	; 0x3ed4 <main+0xd4>
    3ecc:	83 e0       	ldi	r24, 0x03	; 3
    3ece:	f5 01       	movw	r30, r10
    3ed0:	87 bf       	out	0x37, r24	; 55
    3ed2:	e8 95       	spm
    3ed4:	00 e0       	ldi	r16, 0x00	; 0
    3ed6:	11 e0       	ldi	r17, 0x01	; 1

      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    3ed8:	4f d0       	rcall	.+158    	; 0x3f78 <getch>
    3eda:	f8 01       	movw	r30, r16
    3edc:	81 93       	st	Z+, r24
    3ede:	8f 01       	movw	r16, r30
      while (--length);
    3ee0:	ce 12       	cpse	r12, r30
    3ee2:	fa cf       	rjmp	.-12     	; 0x3ed8 <main+0xd8>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account (not doing so just means that we will
      //  treat the top of both "pages" of flash as NRWW, for a slight speed
      //  decrease, so fixing this is not urgent.)
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    3ee4:	a1 14       	cp	r10, r1
    3ee6:	f8 e3       	ldi	r31, 0x38	; 56
    3ee8:	bf 06       	cpc	r11, r31
    3eea:	20 f0       	brcs	.+8      	; 0x3ef4 <main+0xf4>
    3eec:	83 e0       	ldi	r24, 0x03	; 3
    3eee:	f5 01       	movw	r30, r10
    3ef0:	87 bf       	out	0x37, r24	; 55
    3ef2:	e8 95       	spm

      // Read command terminator, start reply
      verifySpace();
    3ef4:	4c d0       	rcall	.+152    	; 0x3f8e <verifySpace>

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    3ef6:	07 b6       	in	r0, 0x37	; 55
    3ef8:	00 fc       	sbrc	r0, 0
    3efa:	fd cf       	rjmp	.-6      	; 0x3ef6 <main+0xf6>
    3efc:	f5 01       	movw	r30, r10
    3efe:	a0 e0       	ldi	r26, 0x00	; 0
    3f00:	b1 e0       	ldi	r27, 0x01	; 1
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    3f02:	8c 91       	ld	r24, X
        a |= (*bufPtr++) << 8;
    3f04:	11 96       	adiw	r26, 0x01	; 1
    3f06:	2c 91       	ld	r18, X
    3f08:	11 97       	sbiw	r26, 0x01	; 1
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	92 2b       	or	r25, r18
# define UART_SRL UBRR3L
# define UART_UDR UDR3
#endif

/* main program starts here */
int main(void) {
    3f0e:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    3f10:	0c 01       	movw	r0, r24
    3f12:	f7 be       	out	0x37, r15	; 55
    3f14:	e8 95       	spm
    3f16:	11 24       	eor	r1, r1
        addrPtr += 2;
    3f18:	32 96       	adiw	r30, 0x02	; 2
      } while (--ch);
    3f1a:	a0 38       	cpi	r26, 0x80	; 128
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	b8 07       	cpc	r27, r24
    3f20:	81 f7       	brne	.-32     	; 0x3f02 <main+0x102>

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    3f22:	f5 01       	movw	r30, r10
    3f24:	e7 be       	out	0x37, r14	; 55
    3f26:	e8 95       	spm
      boot_spm_busy_wait();
    3f28:	07 b6       	in	r0, 0x37	; 55
    3f2a:	00 fc       	sbrc	r0, 0
    3f2c:	fd cf       	rjmp	.-6      	; 0x3f28 <main+0x128>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    3f2e:	d7 be       	out	0x37, r13	; 55
    3f30:	e8 95       	spm
    3f32:	1b c0       	rjmp	.+54     	; 0x3f6a <main+0x16a>
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    3f34:	84 37       	cpi	r24, 0x74	; 116
    3f36:	61 f4       	brne	.+24     	; 0x3f50 <main+0x150>
      // READ PAGE - we only read flash
      getch();			/* getlen() */
    3f38:	1f d0       	rcall	.+62     	; 0x3f78 <getch>
      length = getch();
    3f3a:	1e d0       	rcall	.+60     	; 0x3f78 <getch>
    3f3c:	18 2f       	mov	r17, r24
      getch();
    3f3e:	1c d0       	rcall	.+56     	; 0x3f78 <getch>

      verifySpace();
    3f40:	26 d0       	rcall	.+76     	; 0x3f8e <verifySpace>
        __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
        // read a Flash byte and increment the address
        __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
        putch(ch);
    3f42:	f5 01       	movw	r30, r10
    3f44:	85 91       	lpm	r24, Z+
    3f46:	5f 01       	movw	r10, r30
    3f48:	13 d0       	rcall	.+38     	; 0x3f70 <putch>
      } while (--length);
    3f4a:	11 50       	subi	r17, 0x01	; 1
    3f4c:	d1 f7       	brne	.-12     	; 0x3f42 <main+0x142>
    3f4e:	0d c0       	rjmp	.+26     	; 0x3f6a <main+0x16a>
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    3f50:	85 37       	cpi	r24, 0x75	; 117
    3f52:	31 f4       	brne	.+12     	; 0x3f60 <main+0x160>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    3f54:	1c d0       	rcall	.+56     	; 0x3f8e <verifySpace>
      putch(SIGNATURE_0);
    3f56:	8e e1       	ldi	r24, 0x1E	; 30
    3f58:	0b d0       	rcall	.+22     	; 0x3f70 <putch>
      putch(SIGNATURE_1);
    3f5a:	84 e9       	ldi	r24, 0x94	; 148
    3f5c:	09 d0       	rcall	.+18     	; 0x3f70 <putch>
    3f5e:	8f cf       	rjmp	.-226    	; 0x3e7e <main+0x7e>
      putch(SIGNATURE_2);
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    3f60:	81 35       	cpi	r24, 0x51	; 81
    3f62:	11 f4       	brne	.+4      	; 0x3f68 <main+0x168>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    3f64:	88 e0       	ldi	r24, 0x08	; 8
    3f66:	0f d0       	rcall	.+30     	; 0x3f86 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    3f68:	12 d0       	rcall	.+36     	; 0x3f8e <verifySpace>
    }
    putch(STK_OK);
    3f6a:	80 e1       	ldi	r24, 0x10	; 16
    3f6c:	01 d0       	rcall	.+2      	; 0x3f70 <putch>
  }
    3f6e:	79 cf       	rjmp	.-270    	; 0x3e62 <main+0x62>

00003f70 <putch>:
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    3f70:	5d 9b       	sbis	0x0b, 5	; 11
    3f72:	fe cf       	rjmp	.-4      	; 0x3f70 <putch>
  UART_UDR = ch;
    3f74:	8c b9       	out	0x0c, r24	; 12
    3f76:	08 95       	ret

00003f78 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    3f78:	5f 9b       	sbis	0x0b, 7	; 11
    3f7a:	fe cf       	rjmp	.-4      	; 0x3f78 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    3f7c:	5c 99       	sbic	0x0b, 4	; 11
    3f7e:	01 c0       	rjmp	.+2      	; 0x3f82 <getch+0xa>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3f80:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UART_UDR;
    3f82:	8c b1       	in	r24, 0x0c	; 12
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    3f84:	08 95       	ret

00003f86 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    3f86:	98 e1       	ldi	r25, 0x18	; 24
    3f88:	91 bd       	out	0x21, r25	; 33
  WDTCSR = x;
    3f8a:	81 bd       	out	0x21, r24	; 33
    3f8c:	08 95       	ret

00003f8e <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    3f8e:	f4 df       	rcall	.-24     	; 0x3f78 <getch>
    3f90:	80 32       	cpi	r24, 0x20	; 32
    3f92:	19 f0       	breq	.+6      	; 0x3f9a <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    3f94:	88 e0       	ldi	r24, 0x08	; 8
    3f96:	f7 df       	rcall	.-18     	; 0x3f86 <watchdogConfig>
    3f98:	ff cf       	rjmp	.-2      	; 0x3f98 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    3f9a:	84 e1       	ldi	r24, 0x14	; 20
    3f9c:	e9 cf       	rjmp	.-46     	; 0x3f70 <putch>

00003f9e <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    3f9e:	cf 93       	push	r28
    3fa0:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    3fa2:	ea df       	rcall	.-44     	; 0x3f78 <getch>
    3fa4:	c1 50       	subi	r28, 0x01	; 1
    3fa6:	e9 f7       	brne	.-6      	; 0x3fa2 <getNch+0x4>
  verifySpace();
}
    3fa8:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    3faa:	f1 cf       	rjmp	.-30     	; 0x3f8e <verifySpace>

00003fac <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    3fac:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    3fae:	80 e0       	ldi	r24, 0x00	; 0
    3fb0:	ea df       	rcall	.-44     	; 0x3f86 <watchdogConfig>
  __asm__ __volatile__ (
    3fb2:	ee 27       	eor	r30, r30
    3fb4:	ff 27       	eor	r31, r31
    3fb6:	09 94       	ijmp
